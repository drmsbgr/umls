@startuml Gate UML

interface IOverridable{

}

interface IOverrider{

}

abstract class BaseLogicGate{
    +OnOutputChange:Action<bool>
    {abstract}+CalculateOutput():bool
    {abstract}+HasThisInput(inputGate:Input):bool
    {abstract}+GetExpression():string
}

abstract class SingleInputGate extends BaseLogicGate{
    +input:Input
    +HasThisInput(inputGate:Input):bool
}

class NotGate extends SingleInputGate{
    +CalculateOutput():bool
    +GetExpression():string
}

class SplitterGate extends SingleInputGate{
    +CalculateOutput():bool
    +GetExpression():string
}

abstract class BiInputGate extends BaseLogicGate{
    +input0:Input
    +input1:Input
    +HasThisInput(inputGate:InputGate):bool
}

class AndGate extends BiInputGate{
    +CalculateOutput():bool
    +GetExpression():string
}

class BiconditionalGate extends BiInputGate{
    +CalculateOutput():bool
    +GetExpression():string
}

class ImplactionGate extends BiInputGate{
    +CalculateOutput():bool
    +GetExpression():string
}

class OrGate extends BiInputGate{
    +CalculateOutput():bool
    +GetExpression():string
}

class XorGate extends BiInputGate{
    +CalculateOutput():bool
    +GetExpression():string
}

abstract class VisualBase{

}

class Input extends VisualBase implements IOverridable{

}

class Output extends VisualBase implements IOverrider{

}

class Connector extends VisualBase implements IOverridable,IOverrider{

}

hide empty members

@enduml

